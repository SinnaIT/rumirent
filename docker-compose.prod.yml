# Docker Compose para producción
version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: rumirent-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rumirent_prod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-contractor_db_prod}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - rumirent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rumirent_prod} -d ${POSTGRES_DB:-contractor_db_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rumirent-app-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - DEBUG=false
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rumirent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: rumirent-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - rumirent-network
    profiles:
      - nginx

volumes:
  postgres_prod_data:
    driver: local

networks:
  rumirent-network:
    driver: bridge