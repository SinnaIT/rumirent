generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  password       String
  nombre         String
  rut            String        @unique
  telefono       String?
  birthDate      DateTime?
  role           Role          @default(BROKER)
  activo         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clientes       Cliente[]     @relation("ClienteBroker")
  leads          Lead[]
  metasMensuales MetaMensual[]

  @@map("users")
}

model Empresa {
  id          String     @id @default(cuid())
  nombre      String
  rut         String     @unique
  razonSocial String
  direccion   String?
  telefono    String?
  email       String?
  activa      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  edificios   Edificio[]

  @@map("empresas")
}

model Edificio {
  id                 String                     @id @default(cuid())
  nombre             String
  direccion          String
  comuna             String
  ciudad             String
  region             String
  codigoPostal       String?
  urlGoogleMaps      String?
  telefono           String?
  email              String?
  descripcion        String?
  empresaId          String
  comisionId         String
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  cambiosProgramados CambioComisionProgramado[]
  empresa            Empresa                    @relation(fields: [empresaId], references: [id])
  comision           Comision                   @relation(fields: [comisionId], references: [id])
  leads              Lead[]                     @relation("LeadEdificio")
  tiposUnidad        TipoUnidadEdificio[]
  unidades           Unidad[]
  imagenes           ImagenEdificio[]
  caracteristicas    CaracteristicaEdificio[]

  @@map("edificios")
}

model ImagenEdificio {
  id          String         @id @default(cuid())
  edificioId  String
  url         String
  descripcion String?
  orden       Int            @default(0)
  imageType   TipoImagenUrl  @default(URL)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  edificio    Edificio       @relation(fields: [edificioId], references: [id], onDelete: Cascade)

  @@map("imagenes_edificio")
}

model TipoCaracteristica {
  id              String                   @id @default(cuid())
  nombre          String                   @unique
  descripcion     String?
  activo          Boolean                  @default(true)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  caracteristicas CaracteristicaEdificio[]

  @@map("tipos_caracteristica")
}

model CaracteristicaEdificio {
  id                   String             @id @default(cuid())
  edificioId           String
  tipoCaracteristicaId String
  nombre               String
  valor                String
  mostrarEnResumen     Boolean            @default(true)
  icono                String?
  tipoIcono            TipoIcono          @default(LUCIDE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  edificio             Edificio           @relation(fields: [edificioId], references: [id], onDelete: Cascade)
  tipoCaracteristica   TipoCaracteristica @relation(fields: [tipoCaracteristicaId], references: [id])

  @@map("caracteristicas_edificio")
}

enum TipoIcono {
  LUCIDE
  URL
  UPLOAD
}

enum TipoImagenUrl {
  URL
  UPLOAD
}

model TipoUnidadEdificio {
  id                 String                     @id @default(cuid())
  nombre             String
  codigo             String
  bedrooms           Int?
  bathrooms          Int?
  comisionId         String?
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  edificioId         String
  cambiosProgramados CambioComisionProgramado[]
  comision           Comision?                  @relation("TipoUnidadComision", fields: [comisionId], references: [id])
  edificio           Edificio                   @relation(fields: [edificioId], references: [id], onDelete: Cascade)
  unidades           Unidad[]
  leads              Lead[]                     @relation("LeadTipoUnidad")

  @@unique([edificioId, codigo])
  @@map("tipos_unidad_edificio")
}

model Unidad {
  id                   String             @id @default(cuid())
  numero               String
  estado               EstadoUnidad       @default(DISPONIBLE)
  descripcion          String?
  metros2              Float?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  edificioId           String
  tipoUnidadEdificioId String
  leads                Lead?
  edificio             Edificio           @relation(fields: [edificioId], references: [id], onDelete: Cascade)
  tipoUnidadEdificio   TipoUnidadEdificio @relation(fields: [tipoUnidadEdificioId], references: [id])

  @@unique([edificioId, numero])
  @@map("unidades")
}

model Cliente {
  id              String    @id @default(cuid())
  nombre          String
  rut             String    @unique
  email           String?
  telefono        String?
  direccion       String?
  fechaNacimiento DateTime?
  brokerId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  broker          User?     @relation("ClienteBroker", fields: [brokerId], references: [id])
  leads           Lead[]

  @@map("clientes")
}

model Lead {
  id                   String              @id @default(cuid())
  codigoUnidad         String?
  totalLead            Float
  montoUf              Float?
  comision             Float
  estado               EstadoLead          @default(ENTREGADO)
  fechaPagoReserva     DateTime?
  fechaPagoLead        DateTime?
  fechaCheckin         DateTime?
  postulacion          String?
  observaciones        String?
  conciliado           Boolean             @default(false)
  fechaConciliacion    DateTime?
  reglaComisionId      String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  brokerId             String
  clienteId            String
  unidadId             String?             @unique
  edificioId           String
  comisionId           String?
  tipoUnidadEdificioId String?
  broker               User                @relation(fields: [brokerId], references: [id])
  cliente              Cliente             @relation(fields: [clienteId], references: [id])
  comisionBase         Comision?           @relation("LeadComisionBase", fields: [comisionId], references: [id])
  edificio             Edificio            @relation("LeadEdificio", fields: [edificioId], references: [id])
  reglaComision        ReglaComision?      @relation(fields: [reglaComisionId], references: [id])
  unidad               Unidad?             @relation(fields: [unidadId], references: [id])
  tipoUnidadEdificio   TipoUnidadEdificio? @relation("LeadTipoUnidad", fields: [tipoUnidadEdificioId], references: [id])

  @@map("leads")
}

model Comision {
  id                 String                     @id @default(cuid())
  nombre             String                     @unique
  codigo             String                     @unique
  porcentaje         Float
  activa             Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  cambiosProgramados CambioComisionProgramado[]
  edificios          Edificio[]
  leadsComisionBase  Lead[]                     @relation("LeadComisionBase")
  reglasComision     ReglaComision[]
  tiposUnidad        TipoUnidadEdificio[]       @relation("TipoUnidadComision")

  @@map("comisiones")
}

model ReglaComision {
  id             String   @id @default(cuid())
  cantidadMinima Float
  cantidadMaxima Float?
  porcentaje     Float
  comisionId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  leads          Lead[]
  comision       Comision @relation(fields: [comisionId], references: [id], onDelete: Cascade)

  @@map("reglas_comision")
}

model CambioComisionProgramado {
  id                   String              @id @default(cuid())
  fechaCambio          DateTime
  comisionId           String
  edificioId           String
  tipoUnidadEdificioId String?
  ejecutado            Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  comision             Comision            @relation(fields: [comisionId], references: [id], onDelete: Cascade)
  edificio             Edificio            @relation(fields: [edificioId], references: [id], onDelete: Cascade)
  tipoUnidadEdificio   TipoUnidadEdificio? @relation(fields: [tipoUnidadEdificioId], references: [id])

  @@map("cambios_comision_programados")
}

enum Role {
  ADMIN
  BROKER
}

enum EstadoUnidad {
  DISPONIBLE
  RESERVADA
  VENDIDA
}

enum EstadoLead {
  ENTREGADO
  RESERVA_PAGADA
  APROBADO
  RECHAZADO
}

model MetaMensual {
  id        String   @id @default(cuid())
  brokerId  String?
  mes       Int
  anio      Int
  montoMeta Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  broker    User?    @relation(fields: [brokerId], references: [id], onDelete: Cascade)

  @@unique([brokerId, mes, anio])
  @@map("metas_mensuales")
}
