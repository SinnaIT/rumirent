name: Build and Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Manual trigger with configurable options
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests before deployment'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests (OPTIONAL - only runs if enabled)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Solo ejecuta tests si:
    # 1. Es manual dispatch Y run_tests es true, O
    # 2. Es PR (para validación de cambios)
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.run_tests == true) ||
      (github.event_name == 'pull_request')

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Run Prisma Migrations
        run: pnpm db:migrate:prod
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Run tests
        run: pnpm test:run
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          JWT_SECRET: test-jwt-secret-key-for-ci
          JWT_EXPIRES_IN: 7d

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    # Solo depende de test si test realmente se ejecutó
    needs: test
    if: |
      always() &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 3: Deploy to VPS
  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          script: |
            cd /opt/rumirent-app

            # Login to GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove old containers
            docker-compose -f docker-compose.deploy.yml down

            # Start new containers
            docker-compose -f docker-compose.deploy.yml up -d

            # Run migrations
            docker-compose -f docker-compose.deploy.yml exec -T app sh -c "pnpm db:migrate:prod"

            # Clean up old images
            docker image prune -af --filter "until=72h"

            # Show running containers
            docker-compose -f docker-compose.deploy.yml ps

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.VPS_URL }}/api/test || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo " Deployment successful to ${{ secrets.VPS_URL }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "L Deployment failed"
          exit 1
